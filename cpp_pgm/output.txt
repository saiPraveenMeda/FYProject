'//','C++','program','to','check','if','a','tree','is','continuous','or','not','#include<bits/stdc++.h>','using','namespace','std;','/*','A','binary','tree','node','has','data,','pointer','to','left','child','and','a','pointer','to','right','child','*/struct','Node','{','int','data;','struct','Node*','left,','*','right;','};','/*','Helper','function','that','allocates','a','new','node','with','the','given','data','and','NULL','left','and','right','pointers.','*/struct','Node*','newNode(int','data)','{','struct','Node*','node','=','new','Node;','node->data','=','data;','node->left','=','node->right','=','NULL;','return(node);','}','//','Function','to','check','tree','is','continuous','or','not','bool','treeContinuous(struct','Node','*ptr)','{','//','if','next','node','is','empty','then','return','true','if','(ptr','==','NULL)','return','true;','//','if','current','node','is','leaf','node','then','return','true','//','because','it','is','end','of','root','to','leaf','path','if','(ptr->left','==','NULL','&&','ptr->right','==','NULL)','return','true;','//','If','left','subtree','is','empty,','then','only','check','right','if','(ptr->left','==','NULL)','return','(abs(ptr->data','-','ptr->right->data)','==','1)','&&','treeContinuous(ptr->right);','//','If','right','subtree','is','empty,','then','only','check','left','if','(ptr->right','==','NULL)','return','(abs(ptr->data','-','ptr->left->data)','==','1)','&&','treeContinuous(ptr->left);','//','If','both','left','and','right','subtrees','are','not','empty,','check','//','everything','return','abs(ptr->data','-','ptr->left->data)==1','&&','abs(ptr->data','-','ptr->right->data)==1','&&','treeContinuous(ptr->left)','&&','treeContinuous(ptr->right);','}','/*','Driver','program','to','test','mirror()','*/int','main()','{','struct','Node','*root','=','newNode(3);','root->left','=','newNode(2);','root->right','=','newNode(4);','root->left->left','=','newNode(1);','root->left->right','=','newNode(3);','root->right->right','=','newNode(5);','treeContinuous(root)?','cout','<<','"Yes"',':','cout','<<','"No";','return','0;','}','//','C','program','for','different','tree','traversals','#include','<iostream>','using','namespace','std;','/*','A','binary','tree','node','has','data,','pointer','to','left','child','and','a','pointer','to','right','child','*/struct','Node','{','int','data;','struct','Node*','left,','*right;','Node(int','data)','{','this->data','=','data;','left','=','right','=','NULL;','}','};','/*','Given','a','binary','tree,','print','its','nodes','according','to','the','"bottom-up"','postorder','traversal.','*/void','printPostorder(struct','Node*','node)','{','if','(node','==','NULL)','return;','//','first','recur','on','left','subtree','printPostorder(node->left);','//','then','recur','on','right','subtree','printPostorder(node->right);','//','now','deal','with','the','node','cout','<<','node->data','<<','"','";','}','/*','Given','a','binary','tree,','print','its','nodes','in','inorder*/void','printInorder(struct','Node*','node)','{','if','(node','==','NULL)','return;','/*','first','recur','on','left','child','*/','printInorder(node->left);','/*','then','print','the','data','of','node','*/','cout','<<','node->data','<<','"','";','/*','now','recur','on','right','child','*/','printInorder(node->right);','}','/*','Given','a','binary','tree,','print','its','nodes','in','preorder*/void','printPreorder(struct','Node*','node)','{','if','(node','==','NULL)','return;','/*','first','print','data','of','node','*/','cout','<<','node->data','<<','"','";','/*','then','recur','on','left','sutree','*/','printPreorder(node->left);','/*','now','recur','on','right','subtree','*/','printPreorder(node->right);','}','/*','Driver','program','to','test','above','functions*/int','main()','{','struct','Node','*root','=','new','Node(1);','root->left','=','new','Node(2);','root->right','=','new','Node(3);','root->left->left','=','new','Node(4);','root->left->right','=','new','Node(5);','cout','<<','"\nPreorder','traversal','of','binary','tree','is','\n";','printPreorder(root);','cout','<<','"\nInorder','traversal','of','binary','tree','is','\n";','printInorder(root);','cout','<<','"\nPostorder','traversal','of','binary','tree','is','\n";','printPostorder(root);','return','0;','}//','C++','program','for','Morris','Preorder','traversal','#include','<bits/stdc++.h>','using','namespace','std;','class','node','{','public:','int','data;','node','*left,','*right;','};','/*','Helper','function','that','allocates','a','new','node','with','the','given','data','and','NULL','left','and','right','pointers.','*/node*','newNode(int','data)','{','node*','temp','=','new','node();','temp->data','=','data;','temp->left','=','temp->right','=','NULL;','return','temp;','}','//','Preorder','traversal','without','recursion','and','without','stack','void','morrisTraversalPreorder(node*','root)','{','while','(root)','{','//','If','left','child','is','null,','print','the','current','node','data.','Move','to','//','right','child.','if','(root->left','==','NULL)','{','cout<<root->data<<"','";','root','=','root->right;','}','else','{','//','Find','inorder','predecessor','node*','current','=','root->left;','while','(current->right','&&','current->right','!=','root)','current','=','current->right;','//','If','the','right','child','of','inorder','predecessor','already','points','to','//','this','node','if','(current->right','==','root)','{','current->right','=','NULL;','root','=','root->right;','}','//','If','right','child','doesnt','point','to','this','node,','then','print','this','//','node','and','make','right','child','point','to','this','node','else','{','cout<<root->data<<"','";','current->right','=','root;','root','=','root->left;','}','}','}','}','//','Function','for','sStandard','preorder','traversal','void','preorder(node*','root)','{','if','(root)','{','cout<<root->data<<"','";','preorder(root->left);','preorder(root->right);','}','}','/*','Driver','program','to','test','above','functions*/int','main()','{','node*','root','=','NULL;','root','=','newNode(1);','root->left','=','newNode(2);','root->right','=','newNode(3);','root->left->left','=','newNode(4);','root->left->right','=','newNode(5);','root->right->left','=','newNode(6);','root->right->right','=','newNode(7);','root->left->left->left','=','newNode(8);','root->left->left->right','=','newNode(9);','root->left->right->left','=','newNode(10);','root->left->right->right','=','newNode(11);','morrisTraversalPreorder(root);','cout<<endl;','preorder(root);','return','0;','}','//','Given','an','ancestor','matrix','for','binary','tree,','construct','//','the','tree.','#include','<bits/stdc++.h>','using','namespace','std;','#','define','N','6','/*','A','binary','tree','node','*/struct','Node','{','int','data;','Node','*left,','*right;','};','/*','Helper','function','to','create','a','new','node','*/Node*','newNode(int','data)','{','Node*','node','=','new','Node;','node->data','=','data;','node->left','=','node->right','=','NULL;','return','(node);','}','//','Constructs','tree','from','ancestor','matrix','Node*','ancestorTree(int','mat[][N])','{','//','Binary','array','to','determine','weather','//','parent','is','set','for','node','i','or','not','int','parent[N]','=','{0};','//','Root','will','store','the','root','of','the','constructed','tree','Node*','root','=','NULL;','//','Create','a','multimap,','sum','is','used','as','key','and','row','//','numbers','are','used','as','values','multimap<int,','int>','mm;','for','(int','i','=','0;','i','<','N;','i++)','{','int','sum','=','0;','//','Initialize','sum','of','this','row','for','(int','j','=','0;','j','<','N;','j++)','sum','+=','mat[i][j];','//','insert(sum,','i)','pairs','into','the','multimap','mm.insert(pair<int,','int>(sum,','i));','}','//','node[i]','will','store','node','for','i','in','constructed','tree','Node*','node[N];','//','Traverse','all','entries','of','multimap.','Note','that','values','//','are','accessed','in','increasing','order','of','sum','for','(auto','it','=','mm.begin();','it','!=','mm.end();','++it)','{','//','create','a','new','node','for','every','value','node[it->second]','=','newNode(it->second);','//','To','store','last','processed','node.','This','node','will','be','//','root','after','loop','terminates','root','=','node[it->second];','//','if','non-leaf','node','if','(it->first','!=','0)','{','//','traverse','row','it->second','in','the','matrix','for','(int','i','=','0;','i','<','N;','i++)','{','//','if','parent','is','not','set','and','ancestor','exits','if','(!parent[i]','&&','mat[it->second][i])','{','//','check','for','unoccupied','left/right','node','//','and','set','parent','of','node','i','if','(!node[it->second]->left)','node[it->second]->left','=','node[i];','else','node[it->second]->right','=','node[i];','parent[i]','=','1;','}','}','}','}','return','root;','}','/*','Given','a','binary','tree,','print','its','nodes','in','inorder','*/void','printInorder(Node*','node)','{','if','(node','==','NULL)','return;','printInorder(node->left);','printf("%d','",','node->data);','printInorder(node->right);','}','//','Driver','program','int','main()','{','int','mat[N][N]','=','{{','0,','0,','0,','0,','0,','0','},','{','1,','0,','0,','0,','1,','0','},','{','0,','0,','0,','1,','0,','0','},','{','0,','0,','0,','0,','0,','0','},','{','0,','0,','0,','0,','0,','0','},','{','1,','1,','1,','1,','1,','0','}','};','Node*','root','=','ancestorTree(mat);','cout','<<','"Inorder','traversal','of','tree','is','\n";','printInorder(root);','return','0;'